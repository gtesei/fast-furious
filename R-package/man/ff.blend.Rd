% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fastRegression.R
\name{ff.blend}
\alias{ff.blend}
\title{Given a tuned regression model, finds more performant tuning configurations using Nelder/Mead, quasi-Newton and conjugate-gradient algorithms.}
\usage{
ff.blend(bestTune, caretModelName, Xtrain, y, controlObject, max_secs = 10 *
  60, seed = NULL, method = c("Nelder-Mead", "BFGS", "CG", "L-BFGS-B",
  "SANN"), useInteger = TRUE, parallelize = TRUE, verbose = TRUE)
}
\arguments{
\item{bestTune}{a \code{data.frame} with best tuned parameters of specified model.}

\item{caretModelName}{a string specifying which model to use. Possible values are \code{'lm'}, \code{'bayesglm'}, 
\code{'glm'}, \code{'glmStepAIC'}, \code{'rlm'}, \code{'knn'}, \code{'pls'}, \code{'ridge'}, \code{'enet'}, 
\code{'svmRadial'}, \code{'treebag'}, \code{'gbm'}, \code{'rf'}, \code{'cubist'}, \code{'avNNet'}, 
\code{'xgbTreeGTJ'}, \code{'xgbTree'}}

\item{Xtrain}{the encoded \code{data.frame} of train data. Must be a \code{data.frame} of \code{numeric}}

\item{y}{the output variable as numeric vector}

\item{controlObject}{a list of values that define how this function acts. Must be a caret \code{trainControl} object}

\item{max_secs}{the max number of seconds as time constraint}

\item{seed}{a user specified seed. Useful for replicable execution (e.g. passing the same seed to the \code{\link{ff.verifyBlender}} function) 
if the control object involves random steps for creating resamples.}

\item{method}{the method to use. Possible values are \code{c('Nelder-Mead', 'BFGS', 'CG', 'L-BFGS-B', 'SANN')}.}

\item{useInteger}{\code{TRUE} if the tuning grid is composed of integers and not of continuous numbers.}

\item{parallelize}{\code{TRUE} to enable parallelization (require \code{parallel}).}

\item{verbose}{\code{TRUE} to enable verbose mode.}
}
\value{
a list of lists (one for each specified optimization method) with components \code{par} (best set of parameters found), 
\code{value} (the value of fn corresponding to par), \code{counts} (a two-element integer vector giving the number of calls to fn and gr respectively; 
this excludes those calls needed to compute the Hessian, if requested, and any calls to fn to compute a finite-difference approximation to the gradient), 
\code{convergence} (an integer code. 0 indicates successful completion which is always the case for SANN and Brent), \code{message} 
(a character string giving any additional information returned by the optimizer, or NULL), \code{seed} (the used seed). 
For further details see \code{\link[stats]{optim}}.
}
\description{
Given a tuned regression model, finds more performant tuning configurations using Nelder/Mead, quasi-Newton and conjugate-gradient algorithms.
}
\examples{
## suppress warnings raised because there few obs 
warn_def = getOption('warn')
options(warn=-1)

## data 
Xtrain <- data.frame( a = rep(1:5 , each = 2), b = 10:1, 
c = rep(as.Date(c("2007-06-22", "2004-02-13")),5) )
Xtest <- data.frame( a = rep(2:6 , each = 2), b = 1:10, 
c = rep(as.Date(c("2007-03-01", "2004-05-23")),5) )
Ytrain = 1:10 + runif(nrow(Xtrain))

## encode datasets 
l = ff.makeFeatureSet(Xtrain,Xtest,c("C","N","D"))
Xtrain = l$traindata
Xtest = l$testdata

## make a caret control object 
controlObject <- trainControl(method = "repeatedcv", 
repeats = 1, number = 2)

## train and predict 
tp = ff.trainAndPredict.reg(Ytrain=Ytrain ,
                          Xtrain=Xtrain , 
                          Xtest=Xtest , 
                          model.label = "cubist" , 
                          controlObject=controlObject)

pred_test = tp$pred
model = tp$model
secs = tp$secs

## blender 
gBlender = ff.blend(bestTune = tp$model$bestTune, 
                                caretModelName = "cubist" , 
                                Xtrain = Xtrain , 
                                y = Ytrain, controlObject = tp$model$control, 
                                max_secs = 3, 
                                seed = 123,
                                method = c("Nelder-Mead", "BFGS", "CG", "L-BFGS-B", "SANN"),
                                useInteger = TRUE, 
                                parallelize = TRUE, 
                                verbose = FALSE)
ff.summaryBlender(gBlender)
ff.getBestBlenderPerformance(gBlender)
bestTune = ff.getBestBlenderTune(gBlender)
ff.verifyBlender (gBlender,Xtrain=Xtrain,y=Ytrain,seed=123,
controlObject=tp$model$control,caretModelname = "cubist")

## restore warnings 
options(warn=warn_def)
}
\references{
\url{https://stat.ethz.ch/pipermail/r-devel/2010-August/058081.html}
}

